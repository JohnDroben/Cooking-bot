import requests
from config import THEMEALDB_BASE_URL, MAX_RECIPES_PER_SEARCH
from video_search import VideoSearch

class RecipeAPI:
    def __init__(self):
        self.base_url = THEMEALDB_BASE_URL
        self.video_search = VideoSearch()
    
    def search_recipes(self, query, number=MAX_RECIPES_PER_SEARCH):
        """–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        url = f"{self.base_url}/search.php"
        params = {
            's': query
        }
        
        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            data = response.json()
            
            # TheMealDB –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –ø–æ–ª–µ 'meals'
            if data.get('meals'):
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                return {'meals': data['meals'][:number]}
            else:
                return {'meals': []}
        except requests.RequestException as e:
            return {"error": f"–û—à–∏–±–∫–∞ API: {str(e)}"}
    
    def get_recipe_details(self, recipe_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ü–µ–ø—Ç–µ"""
        url = f"{self.base_url}/lookup.php"
        params = {
            'i': recipe_id
        }
        
        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            data = response.json()
            
            if data.get('meals'):
                return data['meals'][0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ—Ü–µ–ø—Ç
            else:
                return {"error": "–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        except requests.RequestException as e:
            return {"error": f"–û—à–∏–±–∫–∞ API: {str(e)}"}
    
    def get_random_recipes(self, number=5):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        recipes = []
        
        try:
            # TheMealDB –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∑–∞ –∑–∞–ø—Ä–æ—Å
            # –ü–æ—ç—Ç–æ–º—É –¥–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            for _ in range(min(number, 10)):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –∑–∞–ø—Ä–æ—Å–æ–≤
                url = f"{self.base_url}/random.php"
                response = requests.get(url)
                response.raise_for_status()
                data = response.json()
                
                if data.get('meals'):
                    recipes.append(data['meals'][0])
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                import time
                time.sleep(0.1)
            
            return {'meals': recipes}
        except requests.RequestException as e:
            return {"error": f"–û—à–∏–±–∫–∞ API: {str(e)}"}
    
    def get_categories(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        url = f"{self.base_url}/categories.php"
        
        try:
            response = requests.get(url)
            response.raise_for_status()
            data = response.json()
            return data.get('categories', [])
        except requests.RequestException as e:
            return {"error": f"–û—à–∏–±–∫–∞ API: {str(e)}"}
    
    def get_areas(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—É—Ö–æ–Ω—å –º–∏—Ä–∞"""
        url = f"{self.base_url}/list.php?a=list"
        
        try:
            response = requests.get(url)
            response.raise_for_status()
            data = response.json()
            return data.get('meals', [])
        except requests.RequestException as e:
            return {"error": f"–û—à–∏–±–∫–∞ API: {str(e)}"}
    
    def get_recipes_by_category(self, category):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        url = f"{self.base_url}/filter.php"
        params = {'c': category}
        
        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            data = response.json()
            return data.get('meals', [])
        except requests.RequestException as e:
            return {"error": f"–û—à–∏–±–∫–∞ API: {str(e)}"}
    
    def get_recipes_by_area(self, area):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∫—É—Ö–Ω–µ"""
        url = f"{self.base_url}/filter.php"
        params = {'a': area}
        
        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            data = response.json()
            return data.get('meals', [])
        except requests.RequestException as e:
            return {"error": f"–û—à–∏–±–∫–∞ API: {str(e)}"}
    
    def format_recipe_info(self, recipe):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ü–µ–ø—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        title = recipe.get('strMeal', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        image = recipe.get('strMealThumb', '')
        category = recipe.get('strCategory', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        area = recipe.get('strArea', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        instructions = recipe.get('strInstructions', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        ingredients = []
        for i in range(1, 21):  # TheMealDB –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –¥–æ 20 –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
            ingredient = recipe.get(f'strIngredient{i}')
            measure = recipe.get(f'strMeasure{i}')
            if ingredient and ingredient.strip():
                ingredients.append(f"‚Ä¢ {ingredient} - {measure or '–ø–æ –≤–∫—É—Å—É'}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        if len(instructions) > 500:
            instructions = instructions[:500] + "..."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
        ingredients_text = "\n".join(ingredients[:10])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        if len(ingredients) > 10:
            ingredients_text += f"\n... –∏ –µ—â–µ {len(ingredients) - 10} –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ TheMealDB
        youtube_url = recipe.get('strYoutube', '')
        video_text = ""
        
        if youtube_url:
            video_text += f"\nüé• <a href=\"{youtube_url}\">YouTube –≤–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç</a>"
        
        # –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ –Ω–∞ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
        additional_videos = self.video_search.search_all_videos(title)
        if additional_videos:
            video_text += self.video_search.format_video_links(additional_videos)
        
        formatted_text = f"""
üçΩÔ∏è <b>{title}</b>

üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}
üåç –ö—É—Ö–Ω—è: {area}

üìã <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>
{ingredients_text}

üìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
{instructions}

üîó <a href="{recipe.get('strSource', '')}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>{video_text}
        """.strip()
        
        return {
            'title': title,
            'image': image,
            'text': formatted_text,
            'recipe_id': recipe.get('idMeal'),
            'source_url': recipe.get('strSource', '')
        }
