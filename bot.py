import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.constants import ParseMode
from config import TELEGRAM_TOKEN
from database import Database
from api_client import RecipeAPI
from keyboards import (
    get_main_menu_keyboard, 
    get_recipe_actions_keyboard, 
    get_search_options_keyboard,
    get_favorites_menu_keyboard,
    get_rating_keyboard,
    get_categories_keyboard,
    get_areas_keyboard,
    get_inline_main_menu_keyboard
)



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database()
api = RecipeAPI()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.add_user(user_id, user.username, user.first_name, user.last_name)
    
    welcome_message = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

üç≥ –Ø - –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤! 

–ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ üîç –ò—Å–∫–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º
‚Ä¢ ‚ù§Ô∏è –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ä–µ—Ü–µ–ø—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
‚Ä¢ üì± –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """.strip()
    
    await update.message.reply_text(
        welcome_message,
        reply_markup=get_main_menu_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "üîç –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤":
        await show_search_options(update, context)
    elif text == "‚ù§Ô∏è –ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã":
        await show_favorites(update, context)
    elif user_id in user_states and user_states[user_id] == "waiting_for_search":
        await search_recipes(update, context, text)
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=get_main_menu_keyboard()
        )

async def show_search_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ –ø–æ–∏—Å–∫–∞"""
    user_id = update.effective_user.id
    user_states[user_id] = "search_options"
    
    message = """
üîç <b>–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
‚Ä¢ –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
    """.strip()
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            message,
            parse_mode=ParseMode.HTML,
            reply_markup=get_search_options_keyboard()
        )
    else:
        await update.message.reply_text(
            message,
            parse_mode=ParseMode.HTML,
            reply_markup=get_search_options_keyboard()
        )

async def search_recipes(update: Update, context: ContextTypes.DEFAULT_TYPE, query=None):
    """–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    user_id = update.effective_user.id
    
    if not query:
        query = update.message.text
    
    await update.message.reply_text("üîç –ò—â—É —Ä–µ—Ü–µ–ø—Ç—ã...")
    
    # –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —á–µ—Ä–µ–∑ API
    result = api.search_recipes(query)
    
    if "error" in result:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        return
    
    recipes = result.get('meals', [])
    
    if not recipes:
        await update.message.reply_text(
            "üòî –†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
    for recipe in recipes:
        formatted_recipe = api.format_recipe_info(recipe)
        is_favorite = db.is_favorite_recipe(user_id, formatted_recipe['recipe_id'])
        rating = db.get_recipe_rating(user_id, formatted_recipe['recipe_id']) if is_favorite else 0
        
        if formatted_recipe['image']:
            await update.message.reply_photo(
                photo=formatted_recipe['image'],
                caption=formatted_recipe['text'],
                parse_mode=ParseMode.HTML,
                reply_markup=get_recipe_actions_keyboard(
                    formatted_recipe['recipe_id'], 
                    is_favorite,
                    rating
                )
            )
        else:
            await update.message.reply_text(
                formatted_recipe['text'],
                parse_mode=ParseMode.HTML,
                reply_markup=get_recipe_actions_keyboard(
                    formatted_recipe['recipe_id'], 
                    is_favorite,
                    rating
                )
            )
    
    user_states[user_id] = "search_results"

async def show_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã"""
    user_id = update.effective_user.id
    user_states[user_id] = "favorites"
    
    favorites = db.get_favorite_recipes(user_id)
    
    if not favorites:
        message = "‚ù§Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.\n\n–ù–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!"
        if update.callback_query:
            await update.callback_query.edit_message_text(
                message,
                reply_markup=get_favorites_menu_keyboard()
            )
        else:
            await update.message.reply_text(
                message,
                reply_markup=get_favorites_menu_keyboard()
            )
        return
    
    message = f"‚ù§Ô∏è <b>–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã</b> ({len(favorites)} —à—Ç.)\n\n"
    
    for i, recipe in enumerate(favorites, 1):
        rating = recipe.get('rating', 0)
        rating_stars = "‚≠ê" * rating + "‚òÜ" * (5 - rating)
        message += f"{i}. {recipe['title']} {rating_stars}\n"
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            message,
            parse_mode=ParseMode.HTML,
            reply_markup=get_favorites_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            message,
            parse_mode=ParseMode.HTML,
            reply_markup=get_favorites_menu_keyboard()
        )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = update.effective_user.id
    
    if data.startswith("add_favorite_"):
        recipe_id = int(data.split("_")[2])
        await add_to_favorites(update, context, recipe_id)
    
    elif data.startswith("remove_favorite_"):
        recipe_id = int(data.split("_")[2])
        await remove_from_favorites(update, context, recipe_id)
    
    elif data.startswith("rate_"):
        parts = data.split("_")
        recipe_id = int(parts[1])
        rating = int(parts[2])
        await rate_recipe(update, context, recipe_id, rating)
    
    elif data == "random_recipes":
        await get_random_recipes(update, context)
    
    elif data == "search_by_category":
        await show_categories(update, context)
    
    elif data == "search_by_area":
        await show_areas(update, context)
    
    elif data.startswith("category_"):
        category = data.split("_", 1)[1]
        await search_by_category(update, context, category)
    
    elif data.startswith("area_"):
        area = data.split("_", 1)[1]
        await search_by_area(update, context, area)
    
    elif data.startswith("more_videos_"):
        recipe_id = int(data.split("_")[2])
        await show_more_videos(update, context, recipe_id)
    
    elif data == "back_to_main":
        await back_to_main_menu(update, context)
    
    elif data == "back_to_search":
        await show_search_options(update, context)
    
    elif data == "back_to_favorites":
        await show_favorites(update, context)

async def add_to_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE, recipe_id):
    """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ü–µ–ø—Ç–µ
    recipe_info = api.get_recipe_details(recipe_id)
    
    if "error" in recipe_info:
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {recipe_info['error']}")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = db.add_favorite_recipe(
        user_id,
        recipe_id,
        recipe_info.get('strMeal', ''),
        recipe_info.get('strMealThumb', ''),
        recipe_info.get('strSource', '')
    )
    
    if success:
        await update.callback_query.answer("‚úÖ –†–µ—Ü–µ–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º 0
        await update.callback_query.edit_message_reply_markup(
            get_recipe_actions_keyboard(recipe_id, True, 0)
        )
    else:
        # –ï—Å–ª–∏ —Ä–µ—Ü–µ–ø—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        current_rating = db.get_recipe_rating(user_id, recipe_id)
        await update.callback_query.answer("‚ö†Ô∏è –†–µ—Ü–µ–ø—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–∫—É—â–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        await update.callback_query.edit_message_reply_markup(
            get_recipe_actions_keyboard(recipe_id, True, current_rating)
        )

async def remove_from_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE, recipe_id):
    """–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    user_id = update.effective_user.id
    
    success = db.remove_favorite_recipe(user_id, recipe_id)
    
    if success:
        await update.callback_query.answer("‚úÖ –†–µ—Ü–µ–ø—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞
        await update.callback_query.edit_message_reply_markup(
            get_recipe_actions_keyboard(recipe_id, False, 0)
        )
    else:
        await update.callback_query.answer("‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")

async def rate_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE, recipe_id, rating):
    """–û—Ü–µ–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç"""
    user_id = update.effective_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        if not db.is_favorite_recipe(user_id, recipe_id):
            await update.callback_query.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        success = db.update_recipe_rating(user_id, recipe_id, rating)
        
        if success:
            await update.callback_query.answer(f"‚úÖ –û—Ü–µ–Ω–∫–∞ {rating}‚≠ê —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
            await update.callback_query.edit_message_reply_markup(
                get_recipe_actions_keyboard(recipe_id, True, rating)
            )
        else:
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞!")

async def show_more_videos(update: Update, context: ContextTypes.DEFAULT_TYPE, recipe_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ü–µ–ø—Ç–µ
    recipe_info = api.get_recipe_details(recipe_id)
    
    if "error" in recipe_info:
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞!")
        return
    
    recipe_title = recipe_info.get('strMeal', '–†–µ—Ü–µ–ø—Ç')
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.edit_message_text("üé• –ò—â—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ...")
        edit_message = True
    except:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        edit_message = False
        await update.callback_query.answer("üé• –ò—â—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ...")
    
    # –ò—â–µ–º –≤–∏–¥–µ–æ –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
    videos = api.video_search.search_all_videos(recipe_title)
    
    if not videos:
        message = f"üòî –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è '{recipe_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        if edit_message:
            await update.callback_query.edit_message_text(
                message,
                reply_markup=get_recipe_actions_keyboard(recipe_id, False, 0)
            )
        else:
            await update.callback_query.message.reply_text(
                message,
                reply_markup=get_recipe_actions_keyboard(recipe_id, False, 0)
            )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ
    message = f"üé• <b>–í–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è '{recipe_title}':</b>\n\n"
    
    for i, video in enumerate(videos, 1):
        platform_icon = {
            'VK': 'üîµ',
            'Rutube': 'üî¥',
            'YouTube': 'üî¥'
        }.get(video['platform'], 'üìπ')
        
        message += f"{i}. {platform_icon} <a href=\"{video['url']}\">{video['platform']} - {video['title']}</a>\n"
    
    message += f"\nüîô <a href=\"#\">–ù–∞–∑–∞–¥ –∫ —Ä–µ—Ü–µ–ø—Ç—É</a>"
    
    if edit_message:
        await update.callback_query.edit_message_text(
            message,
            parse_mode=ParseMode.HTML,
            reply_markup=get_recipe_actions_keyboard(recipe_id, False, 0)
        )
    else:
        await update.callback_query.message.reply_text(
            message,
            parse_mode=ParseMode.HTML,
            reply_markup=get_recipe_actions_keyboard(recipe_id, False, 0)
        )

async def get_random_recipes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã"""
    user_id = update.effective_user.id
    user_states[user_id] = "search_results"
    
    await update.callback_query.edit_message_text("üé≤ –ò—â—É —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã...")
    
    result = api.get_random_recipes(3)
    
    if "error" in result:
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        return
    
    recipes = result.get('meals', [])
    
    if not recipes:
        await update.callback_query.edit_message_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã.")
        return
    
    for recipe in recipes:
        formatted_recipe = api.format_recipe_info(recipe)
        is_favorite = db.is_favorite_recipe(user_id, formatted_recipe['recipe_id'])
        rating = db.get_recipe_rating(user_id, formatted_recipe['recipe_id']) if is_favorite else 0
        
        if formatted_recipe['image']:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=formatted_recipe['image'],
                caption=formatted_recipe['text'],
                parse_mode=ParseMode.HTML,
                reply_markup=get_recipe_actions_keyboard(
                    formatted_recipe['recipe_id'], 
                    is_favorite,
                    rating
                )
            )
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=formatted_recipe['text'],
                parse_mode=ParseMode.HTML,
                reply_markup=get_recipe_actions_keyboard(
                    formatted_recipe['recipe_id'], 
                    is_favorite,
                    rating
                )
            )

async def show_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    await update.callback_query.edit_message_text("üè∑Ô∏è –ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
    
    categories = api.get_categories()
    
    if "error" in categories:
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {categories['error']}")
        return
    
    if not categories:
        await update.callback_query.edit_message_text("üòî –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    message = "üè∑Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>"
    await update.callback_query.edit_message_text(
        message,
        parse_mode=ParseMode.HTML,
        reply_markup=get_categories_keyboard(categories)
    )

async def show_areas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ö–Ω–∏ –º–∏—Ä–∞"""
    await update.callback_query.edit_message_text("üåç –ó–∞–≥—Ä—É–∂–∞—é –∫—É—Ö–Ω–∏ –º–∏—Ä–∞...")
    
    areas = api.get_areas()
    
    if "error" in areas:
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {areas['error']}")
        return
    
    if not areas:
        await update.callback_query.edit_message_text("üòî –ö—É—Ö–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    message = "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ö–Ω—é –º–∏—Ä–∞:</b>"
    await update.callback_query.edit_message_text(
        message,
        parse_mode=ParseMode.HTML,
        reply_markup=get_areas_keyboard(areas)
    )

async def search_by_category(update: Update, context: ContextTypes.DEFAULT_TYPE, category):
    """–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_id = update.effective_user.id
    user_states[user_id] = "search_results"
    
    await update.callback_query.edit_message_text(f"üè∑Ô∏è –ò—â—É —Ä–µ—Ü–µ–ø—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'...")
    
    recipes = api.get_recipes_by_category(category)
    
    if "error" in recipes:
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {recipes['error']}")
        return
    
    if not recipes:
        await update.callback_query.edit_message_text("üòî –†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ü–µ–ø—Ç–∞—Ö
    full_recipes = []
    for recipe in recipes[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Ä–µ—Ü–µ–ø—Ç–æ–≤
        recipe_details = api.get_recipe_details(recipe['idMeal'])
        if "error" not in recipe_details:
            full_recipes.append(recipe_details)
    
    if not full_recipes:
        await update.callback_query.edit_message_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç—ã
    for recipe in full_recipes:
        formatted_recipe = api.format_recipe_info(recipe)
        is_favorite = db.is_favorite_recipe(user_id, formatted_recipe['recipe_id'])
        rating = db.get_recipe_rating(user_id, formatted_recipe['recipe_id']) if is_favorite else 0
        
        if formatted_recipe['image']:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=formatted_recipe['image'],
                caption=formatted_recipe['text'],
                parse_mode=ParseMode.HTML,
                reply_markup=get_recipe_actions_keyboard(
                    formatted_recipe['recipe_id'], 
                    is_favorite,
                    rating
                )
            )
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=formatted_recipe['text'],
                parse_mode=ParseMode.HTML,
                reply_markup=get_recipe_actions_keyboard(
                    formatted_recipe['recipe_id'], 
                    is_favorite,
                    rating
                )
            )

async def search_by_area(update: Update, context: ContextTypes.DEFAULT_TYPE, area):
    """–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∫—É—Ö–Ω–µ"""
    user_id = update.effective_user.id
    user_states[user_id] = "search_results"
    
    await update.callback_query.edit_message_text(f"üåç –ò—â—É —Ä–µ—Ü–µ–ø—Ç—ã –∫—É—Ö–Ω–∏ '{area}'...")
    
    recipes = api.get_recipes_by_area(area)
    
    if "error" in recipes:
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {recipes['error']}")
        return
    
    if not recipes:
        await update.callback_query.edit_message_text("üòî –†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —ç—Ç–æ–π –∫—É—Ö–Ω–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ü–µ–ø—Ç–∞—Ö
    full_recipes = []
    for recipe in recipes[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Ä–µ—Ü–µ–ø—Ç–æ–≤
        recipe_details = api.get_recipe_details(recipe['idMeal'])
        if "error" not in recipe_details:
            full_recipes.append(recipe_details)
    
    if not full_recipes:
        await update.callback_query.edit_message_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç—ã
    for recipe in full_recipes:
        formatted_recipe = api.format_recipe_info(recipe)
        is_favorite = db.is_favorite_recipe(user_id, formatted_recipe['recipe_id'])
        rating = db.get_recipe_rating(user_id, formatted_recipe['recipe_id']) if is_favorite else 0
        
        if formatted_recipe['image']:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=formatted_recipe['image'],
                caption=formatted_recipe['text'],
                parse_mode=ParseMode.HTML,
                reply_markup=get_recipe_actions_keyboard(
                    formatted_recipe['recipe_id'], 
                    is_favorite,
                    rating
                )
            )
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=formatted_recipe['text'],
                parse_mode=ParseMode.HTML,
                reply_markup=get_recipe_actions_keyboard(
                    formatted_recipe['recipe_id'], 
                    is_favorite,
                    rating
                )
            )

async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_inline_main_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_menu_keyboard()
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()

if __name__ == '__main__':
    main()
